{"email":"test@example.com","error":"\nInvalid `prisma.user.create()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:19:38\n\n  16 }\n  17 const hashed = await bcrypt.hash(password, 10);\n  18 try {\n→ 19   const user = await prisma.user.create({\n         data: {\n           email: \"test@example.com\",\n           username: \"testuser\",\n           password: \"$2b$10$/ySZEVZK2NNQEkDUOJxL0uJNRERRLbxi4PFhnKOr/x5VYAXEZJ38.\",\n           emailVerified: false,\n       +   passwordHash: String\n         }\n       })\n\nArgument `passwordHash` is missing.","level":"error","message":"Registration failed:","timestamp":"2025-07-24 14:24:51"}
{"level":"error","message":"Registration failed","stack":"Error: Registration failed\n    at exports.register (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:26:13)\n    at async exports.register (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:9:18)","timestamp":"2025-07-24 14:24:51"}
{"level":"error","message":"logger is not defined","stack":"ReferenceError: logger is not defined\n    at C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\app.js:34:5\n    at Layer.handle [as handle_request] (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at logger (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\morgan\\index.js:144:5)\n    at Layer.handle [as handle_request] (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)","timestamp":"2025-07-24 15:00:07"}
{"email":"yusufnasir09@gmail.com","error":"\nInvalid `prisma.user.create()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:19:38\n\n  16 }\n  17 const hashed = await bcrypt.hash(password, 10);\n  18 try {\n→ 19   const user = await prisma.user.create(\nUnique constraint failed on the fields: (`username`)","level":"error","message":"Registration failed:","timestamp":"2025-07-24 15:58:32"}
{"level":"error","message":"Email or username already exists","stack":"Error: Email or username already exists\n    at exports.register (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:26:13)\n    at async exports.register (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:9:18)","timestamp":"2025-07-24 15:58:32"}
{"email":"yusufnasir09@gmail.com","level":"error","message":"Login failed: Invalid credentials","timestamp":"2025-07-24 16:48:39"}
{"level":"error","message":"Login endpoint failed:","timestamp":"2025-07-24 16:48:39"}
{"level":"error","message":"Invalid credentials","stack":"Error: Invalid credentials\n    at exports.login (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:39:13)\n    at async exports.login (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:21:18)","timestamp":"2025-07-24 16:48:39"}
{"email":"yusufnasir09@gmail.com","level":"error","message":"Login failed: Invalid credentials","timestamp":"2025-07-24 16:49:12"}
{"level":"error","message":"Login endpoint failed:","timestamp":"2025-07-24 16:49:12"}
{"level":"error","message":"Invalid credentials","stack":"Error: Invalid credentials\n    at exports.login (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:39:13)\n    at async exports.login (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:21:18)","timestamp":"2025-07-24 16:49:12"}
{"email":"yusufnasir09@gmail.com","level":"error","message":"Login failed: Invalid credentials","timestamp":"2025-07-24 16:50:01"}
{"level":"error","message":"Login endpoint failed:","timestamp":"2025-07-24 16:50:01"}
{"level":"error","message":"Invalid credentials","stack":"Error: Invalid credentials\n    at exports.login (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:39:13)\n    at async exports.login (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:21:18)","timestamp":"2025-07-24 16:50:01"}
{"level":"error","message":"authService.generateEmailVerificationCode is not a function","stack":"TypeError: authService.generateEmailVerificationCode is not a function\n    at exports.register (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:11:36)","timestamp":"2025-07-24 18:50:47"}
{"level":"error","message":"Cannot read properties of undefined (reading 'id')","stack":"TypeError: Cannot read properties of undefined (reading 'id')\n    at exports.getProfile (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\userController.js:5:56)\n    at Layer.handle [as handle_request] (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)\n    at router (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\express\\lib\\router\\index.js:47:12)","timestamp":"2025-07-24 19:53:44"}
{"level":"error","message":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\userService.js:5:22\n\n  2 const prisma = new PrismaClient();\n  3 \n  4 exports.getProfile = async (userId) => {\n→ 5   return prisma.user.findUnique({\n        where: {\n          id: undefined,\n      ?   email?: String,\n      ?   username?: String,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   avatarUrl?: StringNullableFilter | String | Null,\n      ?   firstName?: StringNullableFilter | String | Null,\n      ?   lastName?: StringNullableFilter | String | Null,\n      ?   learningStyle?: StringNullableFilter | String | Null,\n      ?   onboardingDone?: BoolFilter | Boolean,\n      ?   avgResponseTime?: FloatNullableFilter | Float | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   role?: EnumRoleFilter | Role,\n      ?   selectedSubjects?: StringNullableListFilter,\n      ?   aspiringCourse?: StringNullableFilter | String | Null,\n      ?   goalScore?: IntNullableFilter | Int | Null,\n      ?   emailVerified?: BoolFilter | Boolean,\n      ?   verificationCode?: StringNullableFilter | String | Null,\n      ?   verificationCodeExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   verificationToken?: StringNullableFilter | String | Null,\n      ?   resetToken?: StringNullableFilter | String | Null,\n      ?   resetTokenExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   studySessions?: StudySessionListRelationFilter,\n      ?   quizAttempts?: QuizAttemptListRelationFilter,\n      ?   progress?: UserProgressListRelationFilter,\n      ?   studyPlans?: StudyPlanListRelationFilter,\n      ?   flashcardReviews?: FlashcardReviewListRelationFilter,\n      ?   mockExams?: MockExamListRelationFilter,\n      ?   feedback?: FeedbackListRelationFilter,\n      ?   questionAttempts?: QuestionAttemptListRelationFilter,\n      ?   topicMasteries?: TopicMasteryListRelationFilter,\n      ?   reviewQueues?: ReviewQueueListRelationFilter,\n      ?   performanceSnapshots?: PerformanceSnapshotListRelationFilter,\n      ?   experimentGroups?: ExperimentGroupListRelationFilter\n        },\n        select: {\n          id: true,\n          email: true,\n          username: true,\n          firstName: true,\n          lastName: true,\n          avatarUrl: true,\n          onboardingDone: true,\n          selectedSubjects: true,\n          aspiringCourse: true,\n          goalScore: true,\n          learningStyle: true,\n          avgResponseTime: true,\n          createdAt: true,\n          updatedAt: true,\n          role: true\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `username` arguments. Available options are marked with ?.","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\userService.js:5:22\n\n  2 const prisma = new PrismaClient();\n  3 \n  4 exports.getProfile = async (userId) => {\n→ 5   return prisma.user.findUnique({\n        where: {\n          id: undefined,\n      ?   email?: String,\n      ?   username?: String,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   avatarUrl?: StringNullableFilter | String | Null,\n      ?   firstName?: StringNullableFilter | String | Null,\n      ?   lastName?: StringNullableFilter | String | Null,\n      ?   learningStyle?: StringNullableFilter | String | Null,\n      ?   onboardingDone?: BoolFilter | Boolean,\n      ?   avgResponseTime?: FloatNullableFilter | Float | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   role?: EnumRoleFilter | Role,\n      ?   selectedSubjects?: StringNullableListFilter,\n      ?   aspiringCourse?: StringNullableFilter | String | Null,\n      ?   goalScore?: IntNullableFilter | Int | Null,\n      ?   emailVerified?: BoolFilter | Boolean,\n      ?   verificationCode?: StringNullableFilter | String | Null,\n      ?   verificationCodeExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   verificationToken?: StringNullableFilter | String | Null,\n      ?   resetToken?: StringNullableFilter | String | Null,\n      ?   resetTokenExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   studySessions?: StudySessionListRelationFilter,\n      ?   quizAttempts?: QuizAttemptListRelationFilter,\n      ?   progress?: UserProgressListRelationFilter,\n      ?   studyPlans?: StudyPlanListRelationFilter,\n      ?   flashcardReviews?: FlashcardReviewListRelationFilter,\n      ?   mockExams?: MockExamListRelationFilter,\n      ?   feedback?: FeedbackListRelationFilter,\n      ?   questionAttempts?: QuestionAttemptListRelationFilter,\n      ?   topicMasteries?: TopicMasteryListRelationFilter,\n      ?   reviewQueues?: ReviewQueueListRelationFilter,\n      ?   performanceSnapshots?: PerformanceSnapshotListRelationFilter,\n      ?   experimentGroups?: ExperimentGroupListRelationFilter\n        },\n        select: {\n          id: true,\n          email: true,\n          username: true,\n          firstName: true,\n          lastName: true,\n          avatarUrl: true,\n          onboardingDone: true,\n          selectedSubjects: true,\n          aspiringCourse: true,\n          goalScore: true,\n          learningStyle: true,\n          avgResponseTime: true,\n          createdAt: true,\n          updatedAt: true,\n          role: true\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `username` arguments. Available options are marked with ?.\n    at Dn (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at ri.handleRequestError (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at ri.handleAndLogRequestError (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at ri.request (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9812)\n    at async exports.getProfile (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\userController.js:5:18)","timestamp":"2025-07-24 20:09:23"}
{"level":"error","message":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\userService.js:5:22\n\n  2 const prisma = new PrismaClient();\n  3 \n  4 exports.getProfile = async (userId) => {\n→ 5   return prisma.user.findUnique({\n        where: {\n          id: undefined,\n      ?   email?: String,\n      ?   username?: String,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   avatarUrl?: StringNullableFilter | String | Null,\n      ?   firstName?: StringNullableFilter | String | Null,\n      ?   lastName?: StringNullableFilter | String | Null,\n      ?   learningStyle?: StringNullableFilter | String | Null,\n      ?   onboardingDone?: BoolFilter | Boolean,\n      ?   avgResponseTime?: FloatNullableFilter | Float | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   role?: EnumRoleFilter | Role,\n      ?   selectedSubjects?: StringNullableListFilter,\n      ?   aspiringCourse?: StringNullableFilter | String | Null,\n      ?   goalScore?: IntNullableFilter | Int | Null,\n      ?   emailVerified?: BoolFilter | Boolean,\n      ?   verificationCode?: StringNullableFilter | String | Null,\n      ?   verificationCodeExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   verificationToken?: StringNullableFilter | String | Null,\n      ?   resetToken?: StringNullableFilter | String | Null,\n      ?   resetTokenExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   studySessions?: StudySessionListRelationFilter,\n      ?   quizAttempts?: QuizAttemptListRelationFilter,\n      ?   progress?: UserProgressListRelationFilter,\n      ?   studyPlans?: StudyPlanListRelationFilter,\n      ?   flashcardReviews?: FlashcardReviewListRelationFilter,\n      ?   mockExams?: MockExamListRelationFilter,\n      ?   feedback?: FeedbackListRelationFilter,\n      ?   questionAttempts?: QuestionAttemptListRelationFilter,\n      ?   topicMasteries?: TopicMasteryListRelationFilter,\n      ?   reviewQueues?: ReviewQueueListRelationFilter,\n      ?   performanceSnapshots?: PerformanceSnapshotListRelationFilter,\n      ?   experimentGroups?: ExperimentGroupListRelationFilter\n        },\n        select: {\n          id: true,\n          email: true,\n          username: true,\n          firstName: true,\n          lastName: true,\n          avatarUrl: true,\n          onboardingDone: true,\n          selectedSubjects: true,\n          aspiringCourse: true,\n          goalScore: true,\n          learningStyle: true,\n          avgResponseTime: true,\n          createdAt: true,\n          updatedAt: true,\n          role: true\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `username` arguments. Available options are marked with ?.","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\userService.js:5:22\n\n  2 const prisma = new PrismaClient();\n  3 \n  4 exports.getProfile = async (userId) => {\n→ 5   return prisma.user.findUnique({\n        where: {\n          id: undefined,\n      ?   email?: String,\n      ?   username?: String,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   avatarUrl?: StringNullableFilter | String | Null,\n      ?   firstName?: StringNullableFilter | String | Null,\n      ?   lastName?: StringNullableFilter | String | Null,\n      ?   learningStyle?: StringNullableFilter | String | Null,\n      ?   onboardingDone?: BoolFilter | Boolean,\n      ?   avgResponseTime?: FloatNullableFilter | Float | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   role?: EnumRoleFilter | Role,\n      ?   selectedSubjects?: StringNullableListFilter,\n      ?   aspiringCourse?: StringNullableFilter | String | Null,\n      ?   goalScore?: IntNullableFilter | Int | Null,\n      ?   emailVerified?: BoolFilter | Boolean,\n      ?   verificationCode?: StringNullableFilter | String | Null,\n      ?   verificationCodeExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   verificationToken?: StringNullableFilter | String | Null,\n      ?   resetToken?: StringNullableFilter | String | Null,\n      ?   resetTokenExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   studySessions?: StudySessionListRelationFilter,\n      ?   quizAttempts?: QuizAttemptListRelationFilter,\n      ?   progress?: UserProgressListRelationFilter,\n      ?   studyPlans?: StudyPlanListRelationFilter,\n      ?   flashcardReviews?: FlashcardReviewListRelationFilter,\n      ?   mockExams?: MockExamListRelationFilter,\n      ?   feedback?: FeedbackListRelationFilter,\n      ?   questionAttempts?: QuestionAttemptListRelationFilter,\n      ?   topicMasteries?: TopicMasteryListRelationFilter,\n      ?   reviewQueues?: ReviewQueueListRelationFilter,\n      ?   performanceSnapshots?: PerformanceSnapshotListRelationFilter,\n      ?   experimentGroups?: ExperimentGroupListRelationFilter\n        },\n        select: {\n          id: true,\n          email: true,\n          username: true,\n          firstName: true,\n          lastName: true,\n          avatarUrl: true,\n          onboardingDone: true,\n          selectedSubjects: true,\n          aspiringCourse: true,\n          goalScore: true,\n          learningStyle: true,\n          avgResponseTime: true,\n          createdAt: true,\n          updatedAt: true,\n          role: true\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `username` arguments. Available options are marked with ?.\n    at Dn (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at ri.handleRequestError (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at ri.handleAndLogRequestError (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at ri.request (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9812)\n    at async exports.getProfile (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\userController.js:5:18)","timestamp":"2025-07-24 20:18:17"}
{"level":"error","message":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\userService.js:5:22\n\n  2 const prisma = new PrismaClient();\n  3 \n  4 exports.getProfile = async (userId) => {\n→ 5   return prisma.user.findUnique({\n        where: {\n          id: undefined,\n      ?   email?: String,\n      ?   username?: String,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   avatarUrl?: StringNullableFilter | String | Null,\n      ?   firstName?: StringNullableFilter | String | Null,\n      ?   lastName?: StringNullableFilter | String | Null,\n      ?   learningStyle?: StringNullableFilter | String | Null,\n      ?   onboardingDone?: BoolFilter | Boolean,\n      ?   avgResponseTime?: FloatNullableFilter | Float | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   role?: EnumRoleFilter | Role,\n      ?   selectedSubjects?: StringNullableListFilter,\n      ?   aspiringCourse?: StringNullableFilter | String | Null,\n      ?   goalScore?: IntNullableFilter | Int | Null,\n      ?   emailVerified?: BoolFilter | Boolean,\n      ?   verificationCode?: StringNullableFilter | String | Null,\n      ?   verificationCodeExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   verificationToken?: StringNullableFilter | String | Null,\n      ?   resetToken?: StringNullableFilter | String | Null,\n      ?   resetTokenExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   studySessions?: StudySessionListRelationFilter,\n      ?   quizAttempts?: QuizAttemptListRelationFilter,\n      ?   progress?: UserProgressListRelationFilter,\n      ?   studyPlans?: StudyPlanListRelationFilter,\n      ?   flashcardReviews?: FlashcardReviewListRelationFilter,\n      ?   mockExams?: MockExamListRelationFilter,\n      ?   feedback?: FeedbackListRelationFilter,\n      ?   questionAttempts?: QuestionAttemptListRelationFilter,\n      ?   topicMasteries?: TopicMasteryListRelationFilter,\n      ?   reviewQueues?: ReviewQueueListRelationFilter,\n      ?   performanceSnapshots?: PerformanceSnapshotListRelationFilter,\n      ?   experimentGroups?: ExperimentGroupListRelationFilter\n        },\n        select: {\n          id: true,\n          email: true,\n          username: true,\n          firstName: true,\n          lastName: true,\n          avatarUrl: true,\n          onboardingDone: true,\n          selectedSubjects: true,\n          aspiringCourse: true,\n          goalScore: true,\n          learningStyle: true,\n          avgResponseTime: true,\n          createdAt: true,\n          updatedAt: true,\n          role: true\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `username` arguments. Available options are marked with ?.","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\userService.js:5:22\n\n  2 const prisma = new PrismaClient();\n  3 \n  4 exports.getProfile = async (userId) => {\n→ 5   return prisma.user.findUnique({\n        where: {\n          id: undefined,\n      ?   email?: String,\n      ?   username?: String,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   avatarUrl?: StringNullableFilter | String | Null,\n      ?   firstName?: StringNullableFilter | String | Null,\n      ?   lastName?: StringNullableFilter | String | Null,\n      ?   learningStyle?: StringNullableFilter | String | Null,\n      ?   onboardingDone?: BoolFilter | Boolean,\n      ?   avgResponseTime?: FloatNullableFilter | Float | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   role?: EnumRoleFilter | Role,\n      ?   selectedSubjects?: StringNullableListFilter,\n      ?   aspiringCourse?: StringNullableFilter | String | Null,\n      ?   goalScore?: IntNullableFilter | Int | Null,\n      ?   emailVerified?: BoolFilter | Boolean,\n      ?   verificationCode?: StringNullableFilter | String | Null,\n      ?   verificationCodeExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   verificationToken?: StringNullableFilter | String | Null,\n      ?   resetToken?: StringNullableFilter | String | Null,\n      ?   resetTokenExpiry?: DateTimeNullableFilter | DateTime | Null,\n      ?   studySessions?: StudySessionListRelationFilter,\n      ?   quizAttempts?: QuizAttemptListRelationFilter,\n      ?   progress?: UserProgressListRelationFilter,\n      ?   studyPlans?: StudyPlanListRelationFilter,\n      ?   flashcardReviews?: FlashcardReviewListRelationFilter,\n      ?   mockExams?: MockExamListRelationFilter,\n      ?   feedback?: FeedbackListRelationFilter,\n      ?   questionAttempts?: QuestionAttemptListRelationFilter,\n      ?   topicMasteries?: TopicMasteryListRelationFilter,\n      ?   reviewQueues?: ReviewQueueListRelationFilter,\n      ?   performanceSnapshots?: PerformanceSnapshotListRelationFilter,\n      ?   experimentGroups?: ExperimentGroupListRelationFilter\n        },\n        select: {\n          id: true,\n          email: true,\n          username: true,\n          firstName: true,\n          lastName: true,\n          avatarUrl: true,\n          onboardingDone: true,\n          selectedSubjects: true,\n          aspiringCourse: true,\n          goalScore: true,\n          learningStyle: true,\n          avgResponseTime: true,\n          createdAt: true,\n          updatedAt: true,\n          role: true\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `email` or `username` arguments. Available options are marked with ?.\n    at Dn (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at ri.handleRequestError (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at ri.handleAndLogRequestError (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at ri.request (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9812)\n    at async exports.getProfile (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\userController.js:5:18)","timestamp":"2025-07-24 20:43:00"}
{"email":"yusufnasir09@gmail.com","error":"\nInvalid `prisma.user.create()` invocation in\nC:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:24:38\n\n  21 const hashed = await bcrypt.hash(password, 10);\n  22   \n  23 try {\n→ 24   const user = await prisma.user.create({\n         data: {\n           email: \"yusufnasir09@gmail.com\",\n           firstName: \"Yusuf\",\n           lastName: \"Nasir\",\n           phoneNumber: \"09031615501\",\n           password: \"$2b$10$3bthBFTTrgRfXteFhy7T2Oylxt7Jg/BCRDKlZb5OcZsqvUBScZN5y\",\n           emailVerified: true,\n       +   username: String\n         }\n       })\n\nArgument `username` is missing.","level":"error","message":"Registration failed:","timestamp":"2025-07-24 21:52:20"}
{"level":"error","message":"Registration failed","stack":"Error: Registration failed\n    at exports.register (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\authService.js:45:13)\n    at async exports.register (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:10:18)","timestamp":"2025-07-24 21:52:20"}
{"error":"emailTemplate is not defined","level":"error","message":"Failed to send password reset email","timestamp":"2025-07-25 00:02:02","to":"yusufnasir09@gmail.com"}
{"level":"error","message":"emailTemplate is not defined","stack":"ReferenceError: emailTemplate is not defined\n    at exports.sendPasswordResetEmail (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\services\\emailService.js:55:13)\n    at exports.forgotPassword (C:\\Users\\yusuf\\myprojects\\utme-mastery\\backend\\controllers\\authController.js:58:26)","timestamp":"2025-07-25 00:02:02"}
